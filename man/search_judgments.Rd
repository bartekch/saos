% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/search_judgments.R
\name{search_judgments}
\alias{search_judgments}
\title{Search for judgments}
\usage{
search_judgments(all = NULL, legalBase = NULL,
  referencedRegulation = NULL, judgeName = NULL, caseNumber = NULL,
  courtType = NULL, ccCourtType = NULL, ccCourtId = NULL,
  ccCourtCode = NULL, ccCourtName = NULL, ccDivisionId = NULL,
  ccDivisionCode = NULL, ccDivisionName = NULL, scPersonnelType = NULL,
  scChamberId = NULL, scChamberName = NULL, scDivisionId = NULL,
  scDivisionName = NULL, judgmentTypes = NULL, keywords = NULL,
  judgmentDateFrom = NULL, judgmentDateTo = NULL, sortingField = NULL,
  sortingDirection = NULL, limit = NULL, force = FALSE, verbose = TRUE)
}
\arguments{
\item{all}{Character, character vector or a list, see "Query details" section.
Search everywhere for given phrase.}

\item{legalBase}{Character, character vector or a list, see "Query details"
section. Search for legal basis of judgments.}

\item{referencedRegulation}{Character, character vector or a list, see
"Query details" section. Search for regulations referenced in judgments.}

\item{judgeName}{Character. Search for name of any involved judge.}

\item{caseNumber}{Character. Search for judgments with given signature.}

\item{courtType}{Character, one from COMMON, SUPREME, ADMINISTRATIVE,
CONSTITUTIONAL_TRIBUNAL, NATIONAL_APPEAL_CHAMBER. Search for type of court.}

\item{ccCourtType}{Character, one from APPEAL, REGIONAL, DISTRICT. Search for
type of common court.}

\item{ccCourtId}{Positive integer. Search for the given common court ID.}

\item{ccCourtCode}{Character. Search for the given common court code.}

\item{ccCourtName}{Character. Search for the given common court name.}

\item{ccDivisionId}{Positive integer. Search for given common court division ID.}

\item{ccDivisionCode}{Character. Search for given common court division code.}

\item{ccDivisionName}{Character. Search for given common court division name.}

\item{scPersonnelType}{Character, one from ONE_PERSON, THREE_PERSON,
FIVE_PERSON, SEVEN_PERSON, ALL_COURT, ALL_CHAMBER, JOINED_CHAMBERS. Search
for supreme court judgment's personnel type.}

\item{scChamberId}{Positive integer. Search for supreme court chamber ID.}

\item{scChamberName}{Character. Search for supreme court chamber name.}

\item{scDivisionId}{Positive integer. Search for supreme court chamber division ID.}

\item{scDivisionName}{Character. Search for supreme court chamber division name.}

\item{judgmentTypes}{Character vector, subset of DECISION, RESOLUTION,
SENTENCE, REGULATION, REASONS. Search for judgments type.}

\item{keywords}{Character. Search for keywords of judgments.}

\item{judgmentDateFrom}{Any date/time object that could be properly converted
with \code{as.POSIXct}, or a string in a format "\%Y-\%m-\%d".Represents
the earliest allowed judgment's date on the list.}

\item{judgmentDateTo}{Any date/time object that could be properly converted
with \code{as.POSIXct}, or a string in a format "\%Y-\%m-\%d".Represents
the latest allowed judgment's date on the list.}

\item{sortingField}{Character. Represents the field by which you want to sort a list
of items, one from: DATABASE_ID, JUDGMENT_DATE, CASE_NUMBER, CC_COURT_TYPE,
CC_COURT_ID, CC_COURT_CODE, CC_COURT_NAME, CC_COURT_DIVISION_ID,
CC_COURT_DIVISION_CODE, CC_COURT_DIVISION_NAME, SC_JUDGMENT_FORM,
SC_PERSONNEL_TYPE, SC_COURT_DIVISION_ID, SC_COURT_DIVISION_NAME,
SC_COURT_DIVISIONS_CHAMBER_ID, SC_COURT_DIVISIONS_CHAMBER_NAME.}

\item{sortingDirection}{Character, one from ASC, DESC. Indicates whether sort
  should be increasing or decreasing.}

\item{limit}{Limit the number of search results.}

\item{force}{If TRUE, force search request even if it seems extreme.}

\item{verbose}{Logical. If \code{TRUE} details of searching are printed to
  the screen.}
}
\value{
List of judgments as returned from API.
}
\description{
Search for judgments matching the given query. By default set of results is
  limited to 200. If you want to download more results, use
  \code{force = TRUE}. However be aware that downloading huge number of
  results could be time- and memory-consuming.
}
\section{Query details}{

All parameters are case insensitive.

A few parameters (\code{"all", "legalBase", "referencedRegulation"}) support
  advanced query parsing:
  \itemize{
  \item when query contains multiple words then search for judgments that
    contain all of these words, as if connected by implicit AND operator;
    e.g. \code{"dobra osobiste"},
  \item operator "OR" - search for judgments that contains one of the words
    in a query, e.g. \code{"dobra OR osobiste"},
  \item quote - search for judgments that contains whole phrase,
    e.g. \code{"\\"dobra osobiste\\""}; note that in R we need to escape
    quotation marks to obtain expected result,
  \item minus sign - search for judgments that don't contain this word,
    e.g. \code{"dobra -osobiste"}.
    }
 Operators could be mixed, e.g \code{"\"dobra osobiste\" OR kodeks"}, with
 precedence: quote, OR, implicit AND. OR takes into account only two
 immediate neighbours, so query \code{"dobra osobiste OR kodeks"} will search
 for judgments containing words \code{"dobra"} and at least one from set
 \code{\{"osobiste", "kodeks"\}}.

 Qutation on a single word has no effect.

 Phrase \code{"word1 OR -word2"} is equivalent to \code{"word1 -word2"}.

 A parameter could be a character vector or a list with any of two fields:
 \code{include} and \code{exclude}, which have to be character vectors or
 \code{NULLs}. In case of a vector, if it has length one (i.e. single string)
 it will be send to API as is. If it has two or more elements they
 will be pasted with a space (i.e. implicit AND operator).
 In case of a list elements of \code{include}
 field will be pasted with a space and elements of \code{exclude} field will
 be preceded with "-" operator and then pasted with a space.
 WARNING - every element will be treated as exact phrase, so if you want to
 include or exclude a few words independently, you need to use a single
 element for every word. For example

 \code{list(include = c("dobra osobiste", "kodeks karny"), exclude = "kodeks cywilny")}

 will turn to

 \code{"\\"dobra osobiste\\" \\"kodeks karny\\" -\\"kodeks cywilny\\""},

 or

 \code{c("kodeks karny", "cywilny")}

 will turn to

 \code{"\\"kodeks karny\\" cywilny"}.

Another special parameter is \code{judgmentTypes}. It accepts a character
 vector with any subset of set \{"DECISION", "RESOLUTION", "SENTENCE",
 "REGULATION", "REASONS"\}. API will return judgments with type matching
 anyone from the given vector.
}
\examples{
\donttest{
sj1 <- search_judgments(judgmentDateFrom = "2014-11-20")
sj2 <- search_judgments(judgeName="Maria Tyszel", judgmentDateTo="2014-06-30")


## Using limit and force arguments

# Deafult values, downloadig 200 results
s1 <- search_judgments()

# Limit set to 50, downloading 50 results
s2 <- search_judgments(limit = 50)

# Limit set to 300, but force remains FALSE, downloading 200 results
s3 <- search_judgments(limit = 300)

# Limit set to 300, force is TRUE, downloading 300 results
s4 <- search_judgments(limit = 300, force = TRUE)

length(s1); length(s2); length(s3); length(s4)


## Examples of query operators, starting from most general query.

 # any of two words
 s1 <- search_judgments(all = "dobra OR osobiste")

 # both words
 s2 <- search_judgments(all = "dobra osobiste")

 # exactly given phrase
 s3 <- search_judgments(all = "\\"dobra osobiste\\"")

 # one word but not the other
 s4 <- search_judgments(all = "dobra -osobiste")
 s5 <- search_judgments(all = "-dobra osobiste")

 #'  ## Mixing operators
 # in one string
 s6 <- search_judgments(all = "\\"dobra osobiste\\" -\\"dobra publiczne\\"")

 # as a list
 s7 <- search_judgments(all = list(include = "dobra osobiste",
                            exclude = "dobra publiczne"))
 identical(s6, s7)
 }
}

